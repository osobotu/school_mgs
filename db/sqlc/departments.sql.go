// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: departments.sql

package db

import (
	"context"
)

const createDepartment = `-- name: CreateDepartment :one
INSERT INTO departments (
    name,
    description
) VALUES (
    $1, $2
) RETURNING id, name, description, created_at, updated_at
`

type CreateDepartmentParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error) {
	row := q.db.QueryRowContext(ctx, createDepartment, arg.Name, arg.Description)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDepartment = `-- name: DeleteDepartment :exec
DELETE FROM departments WHERE id = $1
`

func (q *Queries) DeleteDepartment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteDepartment, id)
	return err
}

const getDepartmentByID = `-- name: GetDepartmentByID :one
SELECT id, name, description, created_at, updated_at FROM departments 
WHERE id = $1
`

func (q *Queries) GetDepartmentByID(ctx context.Context, id int32) (Department, error) {
	row := q.db.QueryRowContext(ctx, getDepartmentByID, id)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllDepartments = `-- name: ListAllDepartments :many
SELECT id, name, description, created_at, updated_at FROM departments
`

func (q *Queries) ListAllDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, listAllDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Department{}
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
