// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: term_scores.sql

package db

import (
	"context"
	"time"
)

const createTermScore = `-- name: CreateTermScore :one
INSERT INTO term_scores (
    assessment,
    exam,
    subject_id,
    term_id,
    session_id,
    class_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, assessment, exam, subject_id, term_id, session_id, class_id, created_at, updated_at
`

type CreateTermScoreParams struct {
	Assessment float64 `json:"assessment"`
	Exam       float64 `json:"exam"`
	SubjectID  int32   `json:"subject_id"`
	TermID     int32   `json:"term_id"`
	SessionID  int32   `json:"session_id"`
	ClassID    int32   `json:"class_id"`
}

func (q *Queries) CreateTermScore(ctx context.Context, arg CreateTermScoreParams) (TermScore, error) {
	row := q.db.QueryRowContext(ctx, createTermScore,
		arg.Assessment,
		arg.Exam,
		arg.SubjectID,
		arg.TermID,
		arg.SessionID,
		arg.ClassID,
	)
	var i TermScore
	err := row.Scan(
		&i.ID,
		&i.Assessment,
		&i.Exam,
		&i.SubjectID,
		&i.TermID,
		&i.SessionID,
		&i.ClassID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTermScore = `-- name: DeleteTermScore :exec
DELETE FROM term_scores WHERE id = $1
`

func (q *Queries) DeleteTermScore(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTermScore, id)
	return err
}

const getTermScoreById = `-- name: GetTermScoreById :one
SELECT id, assessment, exam, subject_id, term_id, session_id, class_id, created_at, updated_at FROM term_scores 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTermScoreById(ctx context.Context, id int32) (TermScore, error) {
	row := q.db.QueryRowContext(ctx, getTermScoreById, id)
	var i TermScore
	err := row.Scan(
		&i.ID,
		&i.Assessment,
		&i.Exam,
		&i.SubjectID,
		&i.TermID,
		&i.SessionID,
		&i.ClassID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTermScoresForSubjectAndClass = `-- name: ListTermScoresForSubjectAndClass :many
SELECT id, assessment, exam, subject_id, term_id, session_id, class_id, created_at, updated_at FROM term_scores
WHERE subject_id = $3 AND class_id = $4
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTermScoresForSubjectAndClassParams struct {
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	SubjectID int32 `json:"subject_id"`
	ClassID   int32 `json:"class_id"`
}

func (q *Queries) ListTermScoresForSubjectAndClass(ctx context.Context, arg ListTermScoresForSubjectAndClassParams) ([]TermScore, error) {
	rows, err := q.db.QueryContext(ctx, listTermScoresForSubjectAndClass,
		arg.Limit,
		arg.Offset,
		arg.SubjectID,
		arg.ClassID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TermScore{}
	for rows.Next() {
		var i TermScore
		if err := rows.Scan(
			&i.ID,
			&i.Assessment,
			&i.Exam,
			&i.SubjectID,
			&i.TermID,
			&i.SessionID,
			&i.ClassID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTermScoreById = `-- name: UpdateTermScoreById :one
UPDATE term_scores
SET assessment = $2, exam = $3, updated_at = $4
WHERE id = $1
RETURNING id, assessment, exam, subject_id, term_id, session_id, class_id, created_at, updated_at
`

type UpdateTermScoreByIdParams struct {
	ID         int32     `json:"id"`
	Assessment float64   `json:"assessment"`
	Exam       float64   `json:"exam"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) UpdateTermScoreById(ctx context.Context, arg UpdateTermScoreByIdParams) (TermScore, error) {
	row := q.db.QueryRowContext(ctx, updateTermScoreById,
		arg.ID,
		arg.Assessment,
		arg.Exam,
		arg.UpdatedAt,
	)
	var i TermScore
	err := row.Scan(
		&i.ID,
		&i.Assessment,
		&i.Exam,
		&i.SubjectID,
		&i.TermID,
		&i.SessionID,
		&i.ClassID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
