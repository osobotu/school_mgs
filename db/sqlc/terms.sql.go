// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: terms.sql

package db

import (
	"context"
)

const createTerm = `-- name: CreateTerm :one
INSERT INTO terms (
    name,
    number
) VALUES (
    $1, $2
) RETURNING id, name, number, created_at, updated_at
`

type CreateTermParams struct {
	Name   string `json:"name"`
	Number int32  `json:"number"`
}

func (q *Queries) CreateTerm(ctx context.Context, arg CreateTermParams) (Term, error) {
	row := q.db.QueryRowContext(ctx, createTerm, arg.Name, arg.Number)
	var i Term
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTerm = `-- name: DeleteTerm :exec
DELETE FROM terms WHERE id = $1
`

func (q *Queries) DeleteTerm(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTerm, id)
	return err
}

const getTermByID = `-- name: GetTermByID :one
SELECT id, name, number, created_at, updated_at FROM terms
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTermByID(ctx context.Context, id int32) (Term, error) {
	row := q.db.QueryRowContext(ctx, getTermByID, id)
	var i Term
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
