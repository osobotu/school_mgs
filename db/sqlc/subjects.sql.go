// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: subjects.sql

package db

import (
	"context"
)

const createSubject = `-- name: CreateSubject :one
INSERT INTO subjects (
    name
) VALUES (
    $1
) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateSubject(ctx context.Context, name string) (Subject, error) {
	row := q.db.QueryRowContext(ctx, createSubject, name)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSubject = `-- name: DeleteSubject :exec
DELETE FROM subjects WHERE id = $1
`

func (q *Queries) DeleteSubject(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSubject, id)
	return err
}

const getSubjectById = `-- name: GetSubjectById :one
SELECT id, name, created_at, updated_at FROM subjects
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubjectById(ctx context.Context, id int32) (Subject, error) {
	row := q.db.QueryRowContext(ctx, getSubjectById, id)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubjectByName = `-- name: GetSubjectByName :one
SELECT id, name, created_at, updated_at FROM subjects
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetSubjectByName(ctx context.Context, name string) (Subject, error) {
	row := q.db.QueryRowContext(ctx, getSubjectByName, name)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSubjects = `-- name: ListSubjects :many
SELECT id, name, created_at, updated_at FROM subjects
ORDER by name ASC
LIMIT $1
OFFSET $2
`

type ListSubjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSubjects(ctx context.Context, arg ListSubjectsParams) ([]Subject, error) {
	rows, err := q.db.QueryContext(ctx, listSubjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subject{}
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
