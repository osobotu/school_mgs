// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: classes.sql

package db

import (
	"context"
)

const createClass = `-- name: CreateClass :one
INSERT INTO classes (
    name
) VALUES (
    $1
) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateClass(ctx context.Context, name string) (Class, error) {
	row := q.db.QueryRowContext(ctx, createClass, name)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClass = `-- name: DeleteClass :exec
DELETE FROM classes WHERE id = $1
`

func (q *Queries) DeleteClass(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteClass, id)
	return err
}

const getClassByID = `-- name: GetClassByID :one
SELECT id, name, created_at, updated_at FROM classes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClassByID(ctx context.Context, id int32) (Class, error) {
	row := q.db.QueryRowContext(ctx, getClassByID, id)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClassByName = `-- name: GetClassByName :one
SELECT id, name, created_at, updated_at FROM classes 
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetClassByName(ctx context.Context, name string) (Class, error) {
	row := q.db.QueryRowContext(ctx, getClassByName, name)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listClasses = `-- name: ListClasses :many
SELECT id, name, created_at, updated_at FROM classes
ORDER by name
LIMIT $1
OFFSET $2
`

type ListClassesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListClasses(ctx context.Context, arg ListClassesParams) ([]Class, error) {
	rows, err := q.db.QueryContext(ctx, listClasses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Class{}
	for rows.Next() {
		var i Class
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
