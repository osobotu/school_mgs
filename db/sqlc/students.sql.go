// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: students.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (
    first_name,
    last_name,
    middle_name,
    class_id,
    subjects
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, first_name, last_name, middle_name, class_id, subjects, created_at, updated_at
`

type CreateStudentParams struct {
	FirstName  string         `json:"first_name"`
	LastName   string         `json:"last_name"`
	MiddleName sql.NullString `json:"middle_name"`
	ClassID    []int32        `json:"class_id"`
	Subjects   []int32        `json:"subjects"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		pq.Array(arg.ClassID),
		pq.Array(arg.Subjects),
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		pq.Array(&i.ClassID),
		pq.Array(&i.Subjects),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students WHERE id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, id)
	return err
}

const getStudentById = `-- name: GetStudentById :one
SELECT id, first_name, last_name, middle_name, class_id, subjects, created_at, updated_at FROM students
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStudentById(ctx context.Context, id int32) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentById, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		pq.Array(&i.ClassID),
		pq.Array(&i.Subjects),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT id, first_name, last_name, middle_name, class_id, subjects, created_at, updated_at FROM students
ORDER by first_name
LIMIT $1
OFFSET $2
`

type ListStudentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStudents(ctx context.Context, arg ListStudentsParams) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, listStudents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Student{}
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.MiddleName,
			pq.Array(&i.ClassID),
			pq.Array(&i.Subjects),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE students
SET first_name = $2, last_name = $3, middle_name = $4, class_id = $5, subjects = $6
WHERE id = $1
RETURNING id, first_name, last_name, middle_name, class_id, subjects, created_at, updated_at
`

type UpdateStudentParams struct {
	ID         int32          `json:"id"`
	FirstName  string         `json:"first_name"`
	LastName   string         `json:"last_name"`
	MiddleName sql.NullString `json:"middle_name"`
	ClassID    []int32        `json:"class_id"`
	Subjects   []int32        `json:"subjects"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudent,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		pq.Array(arg.ClassID),
		pq.Array(arg.Subjects),
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		pq.Array(&i.ClassID),
		pq.Array(&i.Subjects),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
