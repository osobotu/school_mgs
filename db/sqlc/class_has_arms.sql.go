// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: class_has_arms.sql

package db

import (
	"context"
)

const createClassHasArms = `-- name: CreateClassHasArms :one
INSERT INTO class_has_arms (
    class_id,
    arm_id
) VALUES (
    $1, $2
) RETURNING class_id, arm_id, created_at, updated_at
`

type CreateClassHasArmsParams struct {
	ClassID int32 `json:"class_id"`
	ArmID   int32 `json:"arm_id"`
}

func (q *Queries) CreateClassHasArms(ctx context.Context, arg CreateClassHasArmsParams) (ClassHasArm, error) {
	row := q.db.QueryRowContext(ctx, createClassHasArms, arg.ClassID, arg.ArmID)
	var i ClassHasArm
	err := row.Scan(
		&i.ClassID,
		&i.ArmID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClassHasArms = `-- name: DeleteClassHasArms :exec
DELETE FROM class_has_arms 
WHERE class_id = $1 AND arm_id = $2
`

type DeleteClassHasArmsParams struct {
	ClassID int32 `json:"class_id"`
	ArmID   int32 `json:"arm_id"`
}

func (q *Queries) DeleteClassHasArms(ctx context.Context, arg DeleteClassHasArmsParams) error {
	_, err := q.db.ExecContext(ctx, deleteClassHasArms, arg.ClassID, arg.ArmID)
	return err
}

const listArmsInClass = `-- name: ListArmsInClass :many
SELECT class_id, arm_id, created_at, updated_at FROM class_has_arms
WHERE class_id = $1
`

func (q *Queries) ListArmsInClass(ctx context.Context, classID int32) ([]ClassHasArm, error) {
	rows, err := q.db.QueryContext(ctx, listArmsInClass, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClassHasArm{}
	for rows.Next() {
		var i ClassHasArm
		if err := rows.Scan(
			&i.ClassID,
			&i.ArmID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
