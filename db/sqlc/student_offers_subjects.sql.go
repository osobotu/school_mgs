// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: student_offers_subjects.sql

package db

import (
	"context"
)

const createStudentOffersSubject = `-- name: CreateStudentOffersSubject :one
INSERT INTO student_offers_subject (
    student_id,
    subject_id
) VALUES (
    $1, $2
) RETURNING student_id, subject_id, created_at, updated_at
`

type CreateStudentOffersSubjectParams struct {
	StudentID int32 `json:"student_id"`
	SubjectID int32 `json:"subject_id"`
}

func (q *Queries) CreateStudentOffersSubject(ctx context.Context, arg CreateStudentOffersSubjectParams) (StudentOffersSubject, error) {
	row := q.db.QueryRowContext(ctx, createStudentOffersSubject, arg.StudentID, arg.SubjectID)
	var i StudentOffersSubject
	err := row.Scan(
		&i.StudentID,
		&i.SubjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStudentOffersSubject = `-- name: DeleteStudentOffersSubject :exec
DELETE FROM student_offers_subject
WHERE student_id = $1 AND subject_id = $2
`

type DeleteStudentOffersSubjectParams struct {
	StudentID int32 `json:"student_id"`
	SubjectID int32 `json:"subject_id"`
}

func (q *Queries) DeleteStudentOffersSubject(ctx context.Context, arg DeleteStudentOffersSubjectParams) error {
	_, err := q.db.ExecContext(ctx, deleteStudentOffersSubject, arg.StudentID, arg.SubjectID)
	return err
}

const listSubjectsOfferedByStudentID = `-- name: ListSubjectsOfferedByStudentID :many
SELECT student_id, subject_id, created_at, updated_at FROM student_offers_subject
WHERE student_id = $1
`

func (q *Queries) ListSubjectsOfferedByStudentID(ctx context.Context, studentID int32) ([]StudentOffersSubject, error) {
	rows, err := q.db.QueryContext(ctx, listSubjectsOfferedByStudentID, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StudentOffersSubject{}
	for rows.Next() {
		var i StudentOffersSubject
		if err := rows.Scan(
			&i.StudentID,
			&i.SubjectID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
