// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: department_has_subjects.sql

package db

import (
	"context"
)

const createDepartmentHasSubject = `-- name: CreateDepartmentHasSubject :one
INSERT INTO department_has_subjects (
    department_id,
    subject_id
) VALUES (
    $1, $2
) RETURNING subject_id, department_id, created_at, updated_at
`

type CreateDepartmentHasSubjectParams struct {
	DepartmentID int32 `json:"department_id"`
	SubjectID    int32 `json:"subject_id"`
}

func (q *Queries) CreateDepartmentHasSubject(ctx context.Context, arg CreateDepartmentHasSubjectParams) (DepartmentHasSubject, error) {
	row := q.db.QueryRowContext(ctx, createDepartmentHasSubject, arg.DepartmentID, arg.SubjectID)
	var i DepartmentHasSubject
	err := row.Scan(
		&i.SubjectID,
		&i.DepartmentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDepartmentHasSubjects = `-- name: DeleteDepartmentHasSubjects :exec
DELETE FROM department_has_subjects
WHERE department_id = $1 AND subject_id = $2
`

type DeleteDepartmentHasSubjectsParams struct {
	DepartmentID int32 `json:"department_id"`
	SubjectID    int32 `json:"subject_id"`
}

func (q *Queries) DeleteDepartmentHasSubjects(ctx context.Context, arg DeleteDepartmentHasSubjectsParams) error {
	_, err := q.db.ExecContext(ctx, deleteDepartmentHasSubjects, arg.DepartmentID, arg.SubjectID)
	return err
}

const listSubjectsByDepartmentID = `-- name: ListSubjectsByDepartmentID :many
SELECT subject_id, department_id, created_at, updated_at FROM department_has_subjects
WHERE department_id = $1
`

func (q *Queries) ListSubjectsByDepartmentID(ctx context.Context, departmentID int32) ([]DepartmentHasSubject, error) {
	rows, err := q.db.QueryContext(ctx, listSubjectsByDepartmentID, departmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DepartmentHasSubject{}
	for rows.Next() {
		var i DepartmentHasSubject
		if err := rows.Scan(
			&i.SubjectID,
			&i.DepartmentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
